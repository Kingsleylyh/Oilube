/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Oilube {
  export type ProductDetailStruct = {
    manufacturerName: string;
    productName: string;
    creationTime: BigNumberish;
    currentHolder: AddressLike;
    isDelivered: boolean;
    pathRecord: string[];
  };

  export type ProductDetailStructOutput = [
    manufacturerName: string,
    productName: string,
    creationTime: bigint,
    currentHolder: string,
    isDelivered: boolean,
    pathRecord: string[]
  ] & {
    manufacturerName: string;
    productName: string;
    creationTime: bigint;
    currentHolder: string;
    isDelivered: boolean;
    pathRecord: string[];
  };
}

export interface OilubeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CheckID"
      | "CheckPath"
      | "CheckRole"
      | "NewInstance"
      | "PayToView"
      | "Purchase"
      | "Register"
      | "Transfer"
      | "Withdraw"
      | "fee"
      | "owner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "displayProductDetail"): EventFragment;

  encodeFunctionData(functionFragment: "CheckID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CheckPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "CheckRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "NewInstance",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "PayToView",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Purchase",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Register",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Transfer",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "Withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CheckID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CheckPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CheckRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NewInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PayToView", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace displayProductDetailEvent {
  export type InputTuple = [
    mName: string,
    pName: string,
    creationTime: BigNumberish,
    curHolder: AddressLike,
    isDelivered: boolean,
    path: string[]
  ];
  export type OutputTuple = [
    mName: string,
    pName: string,
    creationTime: bigint,
    curHolder: string,
    isDelivered: boolean,
    path: string[]
  ];
  export interface OutputObject {
    mName: string;
    pName: string;
    creationTime: bigint;
    curHolder: string;
    isDelivered: boolean;
    path: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Oilube extends BaseContract {
  connect(runner?: ContractRunner | null): Oilube;
  waitForDeployment(): Promise<this>;

  interface: OilubeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CheckID: TypedContractMethod<[], [string], "view">;

  CheckPath: TypedContractMethod<[pID: BytesLike], [string[]], "view">;

  CheckRole: TypedContractMethod<[add: AddressLike], [string], "view">;

  NewInstance: TypedContractMethod<
    [mAddress: AddressLike, pName: string],
    [string],
    "nonpayable"
  >;

  PayToView: TypedContractMethod<
    [pID: BytesLike],
    [Oilube.ProductDetailStructOutput],
    "payable"
  >;

  Purchase: TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike, location: string],
    [boolean],
    "nonpayable"
  >;

  Register: TypedContractMethod<
    [rAdd: AddressLike, role: string, name: string, location: string],
    [boolean],
    "nonpayable"
  >;

  Transfer: TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike],
    [boolean],
    "nonpayable"
  >;

  Withdraw: TypedContractMethod<[], [void], "nonpayable">;

  fee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CheckID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CheckPath"
  ): TypedContractMethod<[pID: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "CheckRole"
  ): TypedContractMethod<[add: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "NewInstance"
  ): TypedContractMethod<
    [mAddress: AddressLike, pName: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "PayToView"
  ): TypedContractMethod<
    [pID: BytesLike],
    [Oilube.ProductDetailStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Purchase"
  ): TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike, location: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Register"
  ): TypedContractMethod<
    [rAdd: AddressLike, role: string, name: string, location: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Transfer"
  ): TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "displayProductDetail"
  ): TypedContractEvent<
    displayProductDetailEvent.InputTuple,
    displayProductDetailEvent.OutputTuple,
    displayProductDetailEvent.OutputObject
  >;

  filters: {
    "displayProductDetail(string,string,uint256,address,bool,string[])": TypedContractEvent<
      displayProductDetailEvent.InputTuple,
      displayProductDetailEvent.OutputTuple,
      displayProductDetailEvent.OutputObject
    >;
    displayProductDetail: TypedContractEvent<
      displayProductDetailEvent.InputTuple,
      displayProductDetailEvent.OutputTuple,
      displayProductDetailEvent.OutputObject
    >;
  };
}
