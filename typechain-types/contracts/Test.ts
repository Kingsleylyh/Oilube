/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CheckID"
      | "NewInstance"
      | "Payment"
      | "Purchase"
      | "Register"
      | "Transfer"
      | "Withdraw"
      | "checkPath"
      | "checkRole"
      | "fee"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CheckID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NewInstance",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "Payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Purchase",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Register",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Transfer",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "Withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CheckID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NewInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Payment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export interface Test extends BaseContract {
  connect(runner?: ContractRunner | null): Test;
  waitForDeployment(): Promise<this>;

  interface: TestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CheckID: TypedContractMethod<[], [string], "view">;

  NewInstance: TypedContractMethod<
    [mAddress: AddressLike, pName: string],
    [string],
    "nonpayable"
  >;

  Payment: TypedContractMethod<[], [void], "payable">;

  Purchase: TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike, location: string],
    [boolean],
    "payable"
  >;

  Register: TypedContractMethod<
    [rAdd: AddressLike, role: string, name: string, location: string],
    [boolean],
    "nonpayable"
  >;

  Transfer: TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike],
    [boolean],
    "nonpayable"
  >;

  Withdraw: TypedContractMethod<[], [void], "nonpayable">;

  checkPath: TypedContractMethod<[pID: BytesLike], [string[]], "view">;

  checkRole: TypedContractMethod<[add: AddressLike], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CheckID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NewInstance"
  ): TypedContractMethod<
    [mAddress: AddressLike, pName: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Payment"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "Purchase"
  ): TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike, location: string],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Register"
  ): TypedContractMethod<
    [rAdd: AddressLike, role: string, name: string, location: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Transfer"
  ): TypedContractMethod<
    [acceptAddress: AddressLike, pID: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkPath"
  ): TypedContractMethod<[pID: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "checkRole"
  ): TypedContractMethod<[add: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
